* Summary

This is an Emacs setup with as few ~(require 'foo)~ as possible. It uses
lazy loading in order to not slow down the initial Emacs startup. Loading
and setting up of the feature is postponed to when it is actually needed the
first time. As soon as it is really loaded there is a log to the messages
buffer for learning purposes.

* Usage example

#+BEGIN_SRC shell :eval no
  $ emacs -Q -l /foo/emacs.d/main.el
#+END_SRC

If you use the Colemak keyboard layout and Viper mode:
#+BEGIN_SRC shell :eval no
  $ emacs -Q --eval '(setq kbd-layout "Colemak")' -l /foo/emacs.d/main.el
#+END_SRC

- http://en.wikipedia.org/wiki/Colemak

- http://colemak.com

The defcustom for the location of the external Emacs packages are in
~main.el~.

* Design rationales
** Lazy loading

The functions *load-path-add* and *auto-loads* defined in the file
~base-definitions.el~ prepare the ~load-path~ and the ~autoload~ and
~auto-mode-alist~ for lazy feature loading of Emacs packages.

The function *feature* prepares the optional setup of the feature for
running once at feature load time. Add only a wrapper function
~setup-feature-foo~ in order to keep the value of the variable
~after-load-alist~ uncluttered and informative.

The function *add-hook* prepares the optional setup of the buffer local
settings to be run each time when a buffer is opened in the corresponding
major mode that processes the mode hook. Add only a wrapper function
~setup-buffer-foo~ to ~add-hook~ in order to keep the value of the buffer
hook uncluttered and informative.

** Logging and tracking of feature loading

During this Emacs setup phase when the lazy loading is prepared the function
~provide~ is advised to stop the setup with an error. At the end of the
setup phase the function ~provide~ is advised to just report without error
every provided feature at its load time after the setup.

The error is to track unintended ~provide~ of a feature which means it is
loaded too early instead of lazy loaded sometime after the setup. The report
of ~provide~ is to get an impression of which features are loaded and when.

All features prepared for lazy loading through the function ~feature~ are
also tracked to allow to enforce their loading by calling
~require-lazy-features~ interactively at any time.

* Background and motivation

When I started with Emacs in 2000 as a beginner I took every ~(require
'foo)~ into my setup as if it were meant literally and there would be no
other way to load a package. I became comfortable with Emacs Lisp quickly
and added more and more configuration and functionality. Still using
~(require 'foo)~ kept me away from realizing how the setup entangled more
and more with for example the dependencies of local keymaps. Only after some
intermediate steps I got the whole picture with ~autoload~,
~auto-mode-alist~, ~with-eval-after-load~ and mode hooks to untangle the
setup. The code here is only the part that is already cleaned up. The bigger
part with the old mess is not yet ready to be moved to here.

# * File config :ARCHIVE:noexport:

# Local Variables:
#   coding: us-ascii-unix
#   fill-column: 76
# End:
